* halValidate needs to have initSize, it is a bit tricky for halExport, you can't reallya pass the parser in because it only allows one "format", so I hacked it up.
* Add a units suffix (G, M) to mmapInitSize
* Drop mmap grow functionality, as it doesn't seem to work.  Maybe estimate the initial size from the input or just make it huge.
* Get rid of iterators implementing the types they are iterating over.  Add an explict get or operator*. This will allow  more inlining.
* getSegment is duplicated in different places due to top/bottom/gapped/ungapped implementations.  Is this a good approach?
* typedef containers for HAL objects (e.g. std::set<MappedSegmentPtr>) instead of repeating
* make more members private
* change to std::shared_ptr
* there should not be const pointers for iterators??  Check why const_pointer_cast is needed
* how useful is it that Top/BottomSegmentIterators are the same base class?  Do you ever just iterate not caring? joel: hmm, not sure. i feel like you almost always *should* care, but IIRC the mappedSegment code uses the generic SegmentIterator and downcasts it based on the isTop() response when it needs to treat it like a top/bottom segment.  This creates dynamic casts, but because SegmentIterator is virtual.
* Investigate const casts added with std::shared_ptr, are they really needed?
* Why Genome* rather than smart pointer: halMappedSegmentTest.cpp
* change most pointer function arguments to be reference.
* behavior of ColumnIterator: the last column is inclusive, so if you use toRight() on the last base you crash
* DnaIterator doesn't have a direct way to check for end
  hal_index_t n = ancGenome->getSequenceLength();
  DnaIteratorPtr dnaIt = ancGenome->getDnaIterator();
  for (; dnaIt->getArrayIndex() < n; dnaIt->toRight()) {
* smart pointer casting:
https://herbsutter.com/2012/06/21/reader-qa-why-dont-modern-smart-pointers-implicitly-convert-to/
* dropped gapped??: "Interface for Gapped Top Segment iterator.  Only used internally"
- used by halSummarizeMutations (which doesn't work right)
- but also used by column iterator.
* hdf5DnaIterator structure could be collapsed with generic if genome provide a way to get an array
of DNA.  Maybe pack DNA in mmap?
* Using stTree with C-strings results in copying rather than sharing strings.
* C interface to blockViz is weird, with optional thowing an exception or returning a C string.
* api/mmap_impl/mmapGenome.h:
    We request twice the segment length here because checking the length of
    this segment requires reading the start position of the following segment.
* lastColumn()  should be atEnd
* Segment interface:
- Is really an accessor, not a segment itself, as it can be moved..  Change name.
  or have SegmentIterator.getSegment() return an actually object.
- Why setArrayIndex vs creating new segment object?  This seems to so object can
  be reused by iterator, it doesn't really represent a segment, can't cache.   So seems more like a function bag.
- Function setArrayIndex is a bit confusing (which array?)
- segment is region of sequence with start and length -- determined by how much gapless alignment there is to its parent/children
* Things that probably don't work very well:
- hal::Rearrangement
- inc/halChain.h
- hal::GappedBottomSegmentIterator
* Document why SlicedSegment vs Segment
* writing a custom MappedSegmentSet that hits smart pointer would be really nice
* Change confusing is-a relationships to has-a:
** MappedSegement could have reference to source and target, not be source and get target
* was six almost identical implementations of Segment.isMissingData()
mostly fixed, but still inc/halSegment.h is virtual due to SegmentIterator needing to  * halCommon.h could be split into an DNA operations module.
* how come Genome is_a SegementSequence instead of has_a bunch of SgementedSequences?
Joel: Not entirely sure, but I think so you can work entirely within genome coordinates, and not have to care about sequences.  column iterators for example, would be annoying if you had to iterate through sequences, then through columns within that sequence
* sharing of Hdf5Genome._dnaArray by iterators means multiple iterators in the same genome will not go well.
* Hdf5ExternalArray 
- uses close-ended
- combines buffer with array representation,should be two classes.
- also it is slightly broken -- it reads in the entire thing for unchunked arrays
  commit 0f3f3f4a3cefbede84ce3355e332a7a91eaec1d8 tried to fix this, but had to be reverted.

* DnaIterator getArrayIndex() is a confusing name.
* change SegmentedSequence name to be SegmentedGenome. It is very confusing because of the relationship with Sequence
* change get*Iterator functions that create iterators to create*Iterator
* Sequence is a accessor, not an actual object..
* should change so no longer need marker Sequence data to indicate end
* Doubt that the maybe of the *Iterator.toPrev() methods work.
* are equals methods actually needed.
* TopSegment:
 - getString is duplicated, but it needs a driver to get DNAIterator
 - isCanonicalParalog() could be generic if creating of BottomSegment
   could be generic.  
* halSegmentedSequence uses `position' other code use `index' to describe array index.
* halSequence no longer implements halSegmentedSequence.  These virtual functions were copied over.  This works because iterators implement both of them, but many of these
belong in only one place.
  - getSequenceLength
  - getNumTopSegments
  - getNumBottomSegments
  - getTopSegmentIterator
  - getBottomSegmentIterator
  - getDnaIterator
  - getColumnIterator

* get rid having both const/non-const of getTopSegmentIterator, etc.
* to we want to keep halTopSegmentIterator::ts(), etc?  too terse?
* Sequence::getColumnIterator() do is not quite the same as Genome::getColumnIterator(),
different ranges.
* Sequence::getTopSegmentIterator does not stop at the end of the sequence.
* mmap disk based hash:
https://github.com/evilmucedin/minimal-perfect-hash
https://github.com/ArashPartow/hash
http://cmph.sourceforge.net/
https://github.com/lemire/clhash
* have functions list setSubString assert alignment is writable.
* "the tools are barely tested": create a tools warning list based on ones not tested.
- halLiftover works, probably
- hal4dExtract works too, I added quite a few tests for it
- hal2maf mostly works; wouldn't trust the maxRefGap option
* sometimes index is `index', somethings `arrayIndex'
* mapped segment target is an iterator, but it doesn't seem to have an upper bound, maybe it would be better as a target array.
* merge Hdf5DnaArray and Hdf5DnaDriver
* Utilities that modify a file could make a copy and then update the copy to prevent corruption on failure.  Although this could mean a lot of copies if multiple operations are done.
* look for duplicate code around const/non-const functions and have const function call non-const
* change hdf5Genome to have sequenceNameCache own the object and then drop the need for the zeroLenPosCache, as
* mmap should used hal_size_t  instead of size_t
* genomes don't formally have an array index; they do in mmap; this might be a useful formalization.
